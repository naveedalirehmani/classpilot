generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// USERS --------------------------------------------
model Users {
  id                       String             @id @default(uuid())
  email                    String             @unique
  name                     String
  password                 String
  organization             String?
  profession               String?
  howDidYouHearAboutUs     String?
  // Teacher specific fields
  schoolName               String?
  yearsOfExperience       Int?
  subjectsTaught          String?            // Comma separated subjects
  gradeLevel              String?
  educationalQualification String?
  teacherLicenseNumber    String?            @unique
  otps                     Otp[]
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
  firstTimeLogin           Boolean            @default(true)
  isSuspended              Boolean            @default(false)
  isVerified               Boolean            @default(false)
  role                     Roles              @default(USER)
  isTemporaryPasswordReset Boolean            @default(true)
  isDeleted                Boolean            @default(false)
  restrictions             UserRestrictions[]
  reportedUsers            UserReports[]      @relation("ReportedUser")
  reportsMade              UserReports[]      @relation("Reporter")
  provider                 OAuthProvider      @default(EMAIL_PASSWORD)
  // Subscription and lesson plan relations
  subscription            Subscription?
  lessonPlans            LessonPlan[]
  favoriteLessonPlans    FavoriteLessonPlan[]
  dailyGenerationCount   Int                 @default(0)
  lastGenerationDate     DateTime?

  @@map("users")
}

// ROLES --------------------------------------------
enum Roles {
  SUPER_ADMIN
  ADMIN
  DEVELOPER
  USER
  GUEST
  ANALYST
  MODERATOR
  TEACHER
}

enum OAuthProvider {
  GOOGLE
  OUTLOOK
  FACEBOOK
  GITHUB
  TWITTER
  LINKEDIN
  EMAIL_PASSWORD
}

// RESTRICTIONS --------------------------------------------
model UserRestrictions {
  id              String       @id @default(uuid())
  userId          String
  user            Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restrictionType Restrictions
  createdAt       DateTime     @default(now())

  @@unique([userId, restrictionType])
  @@map("user_restrictions")
}

enum Restrictions {
  CREATE_POST
  EDIT_POST
  DELETE_POST
  VIEW_POST
  CREATE_COMMENT
  VIEW_COMMENT
  ANALYTICS
  REPORT
  ACCOUNT
  CONTENT
  CREATE_LESSON_PLAN
}

// REPORTS --------------------------------------------
model UserReports {
  id             String       @id @default(uuid())
  option         String       @db.VarChar(255)
  reason         String       @db.Text
  reportedUserId String
  reporterId     String
  reportedUser   Users        @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reporter       Users        @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("user_reports")
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

model Otp {
  id         String   @id @default(uuid())
  otp        Int
  created_at DateTime @default(now())
  isExpired  Boolean  @default(false)
  userId     String
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// SUBSCRIPTION --------------------------------------------
model Subscription {
  id              String           @id @default(uuid())
  userId          String           @unique
  user            Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            SubscriptionTier
  startDate       DateTime         @default(now())
  endDate         DateTime
  isActive        Boolean          @default(true)
  dailyLimit      Int              @default(10)
  stripeCustomerId String?         
  stripePriceId   String?
  stripeSubscriptionId String?

  @@map("subscriptions")
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  GOLD
}

// LESSON PLANS --------------------------------------------
model LessonPlan {
  id              String    @id @default(uuid())
  userId          String    
  user            Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  subject         String
  gradeLevel      String
  duration        String    // e.g. "45 minutes"
  objectives      String    @db.Text
  materials       String    @db.Text
  procedures      String    @db.Text
  assessment      String    @db.Text
  homework        String?   @db.Text
  notes           String?   @db.Text
  aiPrompt        String    @db.Text  // Store the prompt used to generate
  aiResponse      String    @db.Text  // Store the AI's response
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  favorites       FavoriteLessonPlan[]

  @@map("lesson_plans")
}

model FavoriteLessonPlan {
  id            String     @id @default(uuid())
  userId        String
  lessonPlanId  String
  user          Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonPlan    LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())

  @@unique([userId, lessonPlanId])
  @@map("favorite_lesson_plans")
}