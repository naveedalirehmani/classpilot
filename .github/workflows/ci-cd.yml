name: ClassPlanner Server CI/CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/server/package-lock.json

      - name: Install dependencies
        run: |
          cd server/server
          npm ci

      - name: Run database migrations
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd server/server/src
          npx prisma migrate deploy

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSHUB_PASS }}

      - name: Build Docker image
        run: |
          docker build ./server/server -f ./server/server/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/classplanner-server:latest

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/classplanner-server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Login to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/classplanner-server:latest
            
            # Stop and remove existing container
            docker stop classplanner-server || true
            docker rm classplanner-server || true
            
            # Clean up unused images
            docker image prune -f
            
            # Run new container with environment variables
            docker run -d \
              -p 4000:4000 \
              --name classplanner-server \
              --restart unless-stopped \
              -e NODE_ENV=production \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e PORT=4000 \
              -e AWS_REGION=us-east-1 \
              -e CLIENT_SERVER=https://classplanner.kohminds.com \
              -e COOKIE_CLIENT=.kohminds.com \
              -e SALT=${{ secrets.SALT }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/classplanner-server:latest 